/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoia;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Objects;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author carlo
 */

public class ArranqueFrio extends javax.swing.JFrame {
    
    public String ruta;
    
    DataSetMovies data = new DataSetMovies();
    public ArrayList<String> nombrePelicula = new ArrayList<>();
    
    public ArrayList<Double> listaSimilitud = new ArrayList<>();
    public ArrayList<Integer> listaRecomendacion = new ArrayList<>();
    
    
    /**
     * Creates new form ArranqueFrio
     * @param ruta
     */
    public ArranqueFrio(String ruta) {
        this.ruta = ruta;
        initComponents();
    }

    private ArranqueFrio() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRecomendar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFrio = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRecomendar.setText("Recomendar");
        btnRecomendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecomendarActionPerformed(evt);
            }
        });

        jLabel1.setText("Arranque en Frío");

        jScrollPane1.setViewportView(jListFrio);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRecomendar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1)))
                        .addGap(0, 223, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(btnRecomendar)
                .addGap(78, 78, 78)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRecomendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecomendarActionPerformed
        // TODO add your handling code here:
        data.LeerArchivo(ruta);
        
        String path = "src/ProyectoIA/test/Datos.txt";
        File file = new File(path);
        String rutaCompleta = file.getAbsolutePath();

        File archivo = new File(rutaCompleta);
        BufferedWriter bw;
 
        if(archivo.exists()) {
            try {
                RecomendacionAlimentada(rutaCompleta);
            } catch (IOException ex) {
                Logger.getLogger(ArranqueFrio.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            RecomendacionDefault();
            DefaultListModel model = new DefaultListModel<>();
            for(String s : nombrePelicula){
            model.addElement(s);
            }
            jListFrio.setModel(model);
        }
    }//GEN-LAST:event_btnRecomendarActionPerformed

    public void RecomendacionDefault () {    
        ArrayList<Double> ratings = MaxSort(data.imdb_score);
        
        for (int i = 0; i <= 10; i++) {
            for (int j = 0; j < ratings.size(); j++) {
                String tempo = data.movie_title.get(j);
                if (Objects.equals(data.imdb_score.get(j), ratings.get(i))&&(!nombrePelicula.contains(tempo))) {
                    nombrePelicula.add(tempo);
                    break;
                }
            }
        }
    }
    
    public void RecomendacionAlimentada (String ruta) throws FileNotFoundException, IOException {
        String director ="",actor ="", genero ="",color="",idioma="",pais="",año="";
      
        
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        archivo = new File (ruta);
        fr = new FileReader (archivo);
        br = new BufferedReader(fr);

        // Lectura del fichero
        String linea;
        while((linea=br.readLine())!=null){
        if(linea.startsWith("(DIRECTOR)")){linea = linea.replace("(DIRECTOR)", ""); director = linea;}
        if(linea.startsWith("(ACTOR)")){linea = linea.replace("(ACTOR)", ""); actor = linea;}
        if(linea.startsWith("(GENERO)")){linea = linea.replace("(GENERO)", ""); genero = linea;}
        if(linea.startsWith("(COLOR)")){linea = linea.replace("(COLOR)", ""); color = linea;}
        if(linea.startsWith("(IDIOMA)")){linea = linea.replace("(IDIOMA)", ""); idioma = linea;}
        if(linea.startsWith("(PAIS)")){linea = linea.replace("(PAIS)", ""); pais = linea;}
        if(linea.startsWith("(AÑO)")){linea = linea.replace("(AÑO)", ""); año = linea; }
        }
        
        Similitud(director,actor,genero,pais,año,idioma,color);
    }
    
    
    public static double Round(double valor, int numeroDecimales) {
        double parteEntera, resultado;
        resultado = valor;
        parteEntera = Math.floor(resultado);
        resultado=(resultado-parteEntera)*Math.pow(10, numeroDecimales);
        resultado=Math.round(resultado);
        resultado=(resultado/Math.pow(10, numeroDecimales))+parteEntera;
        return resultado;
    }
    
    public void Similitud (String Director, String Actor, String Genero, String Pais, String Año, String Idioma, String Color) {
        
        DataSetMovies data = new DataSetMovies();
        data.LeerArchivo(ruta);
        
        double pesoDirector = 0.25;
        double pesoActor = 0.10;
        double pesoGenero = 0.35;
        double pesoPais = 0.10;
        double pesoAñoLanzamiento = 0.15;
        double pesoIdioma = 0.05;
        double pesoColor;
         
       
        String[] generosUsuario = Genero.split(",");
        String[] directorUsuario = Director.split(",");
        String[] actorUsuario = Actor.split(",");
        String[] paisUsuario = Pais.split(",");
        String[] añoUsuario = Año.split(",");
        
       
        for (int i = 0; i < data.director_name.size(); i++) {
            double similitud = 0.0;
            
            if (Director.isEmpty()&&Actor.isEmpty()&&Genero.isEmpty()&&Pais.isEmpty()&&Año.isEmpty()&&Idioma.isEmpty()) {
                if (Color.equals("Color")) {
                    if (data.color.get(i).equals(Color)) {
                        pesoColor = 0.0;
                        similitud = similitud + pesoColor;
                    }
            }
            }
            
            if (Color.equals("Black and White")) {
                if (data.color.get(i).equals(Color)) {
                    pesoColor = 1;
                    similitud = similitud + pesoColor;
                }
            }
            
            if (data.language.get(i).equals(Idioma)) {
                similitud = similitud + pesoIdioma;
            }
            
            
            for (String director : directorUsuario){
            if(data.director_name.get(i).toUpperCase().equals(director)){
                similitud = similitud + pesoDirector;
            }
            }
            
            /*
            for (String idioma : idiomaUsuario){
            if(ListaDirector.get(i).toUpperCase().equals(idioma)){
                similitud = similitud + pesoIdioma;
            }
            }
            */
            
            for (String año : añoUsuario){
                if (año.equals("")) {
                    año="0";
                }
            if(data.title_year.get(i) == Integer.parseInt(año)){
                similitud = similitud + pesoAñoLanzamiento;
            }
            }
            
            for (String actor : actorUsuario){
            if(data.actor_1_name.get(i).toUpperCase().equals(actor)){
                similitud = similitud + pesoActor;
            }
            else if(data.actor_2_name.get(i).toUpperCase().equals(actor)){
                similitud = similitud + pesoActor;
            }
            else if(data.actor_3_name.get(i).toUpperCase().equals(actor)){
                similitud = similitud + pesoActor;
            }
            }
            
            for (String pais : paisUsuario){
            if(data.country.get(i).toUpperCase().equals(pais)){
                similitud = similitud + pesoPais;
            }
            }
             
            ArrayList<String> generosMovie = new ArrayList<>();
            generosMovie = data.genres_by_movie.get(i);
            for (String genero : generosUsuario){
            if(generosMovie.contains(genero)){
                similitud = similitud + pesoGenero;
            }
            }

            similitud = Round(similitud,4);
            listaSimilitud.add(similitud);

        }
        GetListaRecomendacion();
        
        int size;
        if (listaRecomendacion.size()>=10) {
            size = 10;
        } else {
            size = listaRecomendacion.size();
        }
        ArrayList<Integer>listaRandom = new ArrayList<>();
        
        for (int i = 0; i < size; i++) {
        Random rand = new Random();
        while(true) 
        {
        int randomElement = listaRecomendacion.get(rand.nextInt(listaRecomendacion.size()));
        if(!listaRandom.contains(randomElement))
        {
        listaRandom.add(randomElement);
        break;
        }
        }
        }
        DefaultListModel model = new DefaultListModel<>();
        for(Integer random : listaRandom) {
            String add = data.movie_title.get(random);
            model.addElement(add);
        }
        jListFrio.setModel(model);
        
    }
    
    public void GetListaRecomendacion() {
        
        double rango1=0.0;
        double rango2=0.0;
        rango1 = getMax(listaSimilitud,1);
        rango2 = getMax(listaSimilitud,2);
        
        int contador = 2;
        if (rango2 == rango1) {
            while (true) {
            rango2 = getMax(listaSimilitud,contador);
                if (rango2 != rango1) {
                    break;
                } 
                contador++;
            }
        }
        contador = 0;
        for(double n: listaSimilitud)
        {
            if(Objects.equals(n, rango1) ||Objects.equals(n, rango2))                
            {
                listaRecomendacion.add(contador);                        
            }
            contador++;
        }
    }
    
    public Double getMax (ArrayList lista, int n){
        ArrayList<Double> sortedlist = new ArrayList<>(lista); 
        Collections.sort(sortedlist); 
        return sortedlist.get(sortedlist.size()-n);
   }
    
    public ArrayList<Double> MaxSort (ArrayList<Double> lista){
        ArrayList<Double> sortedlist = new ArrayList<>(lista); 
        
        ArrayList<Double> sorted = new ArrayList<>();
        Collections.sort(sortedlist);
          for (int i = sortedlist.size()-1; i >= 0; i--) {
              double n = sortedlist.get(i);
              sorted.add(n);
          }
        return  sorted;
   }

      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArranqueFrio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArranqueFrio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArranqueFrio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArranqueFrio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArranqueFrio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRecomendar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListFrio;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
